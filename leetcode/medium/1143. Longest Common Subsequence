class Solution {
public:
    int dp[1003][1003];
    int solve(int idxA, int idxB, const string &text1, const string &text2){
        if (idxA == -1 || idxB == -1)
            return 0;
        int &ans = dp[idxA][idxB];
        if (ans != -1)
            return ans;
        ans = 0;
        if (text1[idxA] == text2[idxB]){
            ans = max({
                       1 + solve(idxA - 1, idxB - 1, text1, text2),   //take 
                        solve(idxA - 1, idxB, text1, text2), //leave
                        solve(idxA, idxB - 1, text1, text2) //leave
                       });
        }else{
            //need to move on
            ans = max({
                solve(idxA - 1, idxB, text1, text2), //leave
                solve(idxA, idxB - 1, text1, text2) //leave
                });

        }
        return ans;
    }
    
    int longestCommonSubsequence(string text1, string text2) {
        memset(dp, -1, sizeof dp);
        return solve(text1.size() - 1, text2.size() - 1, text1, text2);
    }
};